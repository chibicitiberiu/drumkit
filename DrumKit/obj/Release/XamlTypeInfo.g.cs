//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace DrumKit
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::DrumKit.DrumKit_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::DrumKit.DrumKit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::DrumKit.DrumKit_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace DrumKit.DrumKit_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_2_EditorPage() { return new global::DrumKit.EditorPage(); }

        private object Activate_3_DrumkitLayout() { return new global::DrumKit.DrumkitLayout(); }

        private object Activate_7_Dictionary() { return new global::System.Collections.Generic.Dictionary<global::System.String, global::DrumKit.DrumLayout>(); }

        private object Activate_8_DrumLayout() { return new global::DrumKit.DrumLayout(); }

        private object Activate_11_LayoutsSettingsControl() { return new global::DrumKit.LayoutsSettingsControl(); }

        private object Activate_12_ExperimentsSettingsControl() { return new global::DrumKit.ExperimentsSettingsControl(); }

        private object Activate_13_FileControl() { return new global::DrumKit.FileControl(); }

        private object Activate_14_Drum() { return new global::DrumKit.Drum(); }

        private object Activate_15_List() { return new global::System.Collections.Generic.List<global::DrumKit.SoundSource>(); }

        private object Activate_16_SoundSource() { return new global::DrumKit.SoundSource(); }

        private object Activate_17_DrumsSettingsControl() { return new global::DrumKit.DrumsSettingsControl(); }

        private object Activate_18_DrumkitsSettingsControl() { return new global::DrumKit.DrumkitsSettingsControl(); }

        private object Activate_19_GeneralSettingsControl() { return new global::DrumKit.GeneralSettingsControl(); }

        private object Activate_20_SettingsPage() { return new global::DrumKit.SettingsPage(); }

        private object Activate_21_LoadingPage() { return new global::DrumKit.LoadingPage(); }

        private object Activate_22_MainPage() { return new global::DrumKit.MainPage(); }

        private object Activate_23_LogControl() { return new global::DrumKit.LogControl(); }

        private void MapAdd_7_Dictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::DrumKit.DrumLayout>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::DrumKit.DrumLayout)item;
            collection.Add(newKey, newItem);
        }

        private void VectorAdd_15_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::DrumKit.SoundSource>)instance;
            var newItem = (global::DrumKit.SoundSource)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::DrumKit.DrumKit_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Double":
                xamlType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "String":
                xamlType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Object":
                xamlType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Boolean":
                xamlType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Int32":
                xamlType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.Media.ImageSource":
                xamlType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.ImageSource));
                break;

            case "DrumKit.DrumPlayUI":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.DrumPlayUI), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("Angle");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("DrumID");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "DrumKit.DrumEditUI":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.DrumEditUI), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("Angle");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("DrumID");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "DrumKit.EditorPage":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.EditorPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_2_EditorPage;
                xamlType = userType;
                break;

            case "DrumKit.DrumkitLayout":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.DrumkitLayout), GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_DrumkitLayout;
                userType.AddMemberName("IsDefault");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Name");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("TargetViewSerialize");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("TargetView");
                userType.AddMemberName("Drums");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::DrumKit.DrumLayout>),
                                                   "System.Collections.Generic.Dictionary<String, DrumKit.DrumLayout>");
                userType.AddMemberName("DrumsList");
                xamlType = userType;
                break;

            case "DrumKit.DrumkitLayoutTargetView":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.DrumkitLayoutTargetView), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::DrumKit.DrumkitLayoutTargetView.None);
                userType.AddEnumValue("Snapped", global::DrumKit.DrumkitLayoutTargetView.Snapped);
                userType.AddEnumValue("Filled", global::DrumKit.DrumkitLayoutTargetView.Filled);
                userType.AddEnumValue("Landscape", global::DrumKit.DrumkitLayoutTargetView.Landscape);
                userType.AddEnumValue("Portrait", global::DrumKit.DrumkitLayoutTargetView.Portrait);
                userType.AddEnumValue("All", global::DrumKit.DrumkitLayoutTargetView.All);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "System.Collections.Generic.Dictionary<String, DrumKit.DrumLayout>":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::DrumKit.DrumLayout>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::DrumKit.DrumLayout>),
                                                   "System.Collections.Generic.Dictionary<String, DrumKit.DrumLayout>");
                userType.Activator = Activate_7_Dictionary;
                userType.DictionaryAdd = MapAdd_7_Dictionary;
                xamlType = userType;
                break;

            case "DrumKit.DrumLayout":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.DrumLayout), GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_DrumLayout;
                userType.AddMemberName("TargetId");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Size");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("X");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("Y");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ZIndex");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Angle");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "DrumKit.DrumLayout[]":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.DrumLayout[]), GetXamlTypeByName("System.Array"));
                xamlType = userType;
                break;

            case "System.Array":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Array), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "DrumKit.LayoutsSettingsControl":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.LayoutsSettingsControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_11_LayoutsSettingsControl;
                xamlType = userType;
                break;

            case "DrumKit.ExperimentsSettingsControl":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.ExperimentsSettingsControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_12_ExperimentsSettingsControl;
                xamlType = userType;
                break;

            case "DrumKit.FileControl":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.FileControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_13_FileControl;
                xamlType = userType;
                break;

            case "DrumKit.Drum":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.Drum), GetXamlTypeByName("Object"));
                userType.Activator = Activate_14_Drum;
                userType.AddMemberName("ImageSource");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Id");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Name");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("LoadedImageSource");
                userType.AddMemberName("ImagePressedSource");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("LoadedImagePressedSource");
                userType.AddMemberName("Sounds");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::DrumKit.SoundSource>),
                                                   "System.Collections.Generic.List<DrumKit.SoundSource>");
                xamlType = userType;
                break;

            case "System.Collections.Generic.List<DrumKit.SoundSource>":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.List<global::DrumKit.SoundSource>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::DrumKit.SoundSource>),
                                                   "System.Collections.Generic.List<DrumKit.SoundSource>");
                userType.Activator = Activate_15_List;
                userType.CollectionAdd = VectorAdd_15_List;
                xamlType = userType;
                break;

            case "DrumKit.SoundSource":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.SoundSource), GetXamlTypeByName("Object"));
                userType.Activator = Activate_16_SoundSource;
                userType.AddMemberName("Intensity");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("Source");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "DrumKit.DrumsSettingsControl":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.DrumsSettingsControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_17_DrumsSettingsControl;
                xamlType = userType;
                break;

            case "DrumKit.DrumkitsSettingsControl":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.DrumkitsSettingsControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_18_DrumkitsSettingsControl;
                xamlType = userType;
                break;

            case "DrumKit.GeneralSettingsControl":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.GeneralSettingsControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_19_GeneralSettingsControl;
                xamlType = userType;
                break;

            case "DrumKit.SettingsPage":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.SettingsPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_SettingsPage;
                xamlType = userType;
                break;

            case "DrumKit.LoadingPage":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.LoadingPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_LoadingPage;
                xamlType = userType;
                break;

            case "DrumKit.MainPage":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.MainPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_MainPage;
                xamlType = userType;
                break;

            case "DrumKit.LogControl":
                userType = new global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::DrumKit.LogControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_23_LogControl;
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_DrumPlayUI_Angle(object instance)
        {
            var that = (global::DrumKit.DrumPlayUI)instance;
            return that.Angle;
        }
        private void set_0_DrumPlayUI_Angle(object instance, object Value)
        {
            var that = (global::DrumKit.DrumPlayUI)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_1_DrumPlayUI_DrumID(object instance)
        {
            var that = (global::DrumKit.DrumPlayUI)instance;
            return that.DrumID;
        }
        private object get_2_DrumEditUI_Angle(object instance)
        {
            var that = (global::DrumKit.DrumEditUI)instance;
            return that.Angle;
        }
        private void set_2_DrumEditUI_Angle(object instance, object Value)
        {
            var that = (global::DrumKit.DrumEditUI)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_3_DrumEditUI_DrumID(object instance)
        {
            var that = (global::DrumKit.DrumEditUI)instance;
            return that.DrumID;
        }
        private object get_4_DrumkitLayout_IsDefault(object instance)
        {
            var that = (global::DrumKit.DrumkitLayout)instance;
            return that.IsDefault;
        }
        private void set_4_DrumkitLayout_IsDefault(object instance, object Value)
        {
            var that = (global::DrumKit.DrumkitLayout)instance;
            that.IsDefault = (global::System.Boolean)Value;
        }
        private object get_5_DrumkitLayout_Name(object instance)
        {
            var that = (global::DrumKit.DrumkitLayout)instance;
            return that.Name;
        }
        private void set_5_DrumkitLayout_Name(object instance, object Value)
        {
            var that = (global::DrumKit.DrumkitLayout)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_6_DrumkitLayout_TargetViewSerialize(object instance)
        {
            var that = (global::DrumKit.DrumkitLayout)instance;
            return that.TargetViewSerialize;
        }
        private void set_6_DrumkitLayout_TargetViewSerialize(object instance, object Value)
        {
            var that = (global::DrumKit.DrumkitLayout)instance;
            that.TargetViewSerialize = (global::System.String)Value;
        }
        private object get_7_DrumkitLayout_TargetView(object instance)
        {
            var that = (global::DrumKit.DrumkitLayout)instance;
            return that.TargetView;
        }
        private void set_7_DrumkitLayout_TargetView(object instance, object Value)
        {
            var that = (global::DrumKit.DrumkitLayout)instance;
            that.TargetView = (global::DrumKit.DrumkitLayoutTargetView)Value;
        }
        private object get_8_DrumkitLayout_Drums(object instance)
        {
            var that = (global::DrumKit.DrumkitLayout)instance;
            return that.Drums;
        }
        private void set_8_DrumkitLayout_Drums(object instance, object Value)
        {
            var that = (global::DrumKit.DrumkitLayout)instance;
            that.Drums = (global::System.Collections.Generic.Dictionary<global::System.String, global::DrumKit.DrumLayout>)Value;
        }
        private object get_9_DrumLayout_TargetId(object instance)
        {
            var that = (global::DrumKit.DrumLayout)instance;
            return that.TargetId;
        }
        private void set_9_DrumLayout_TargetId(object instance, object Value)
        {
            var that = (global::DrumKit.DrumLayout)instance;
            that.TargetId = (global::System.String)Value;
        }
        private object get_10_DrumLayout_Size(object instance)
        {
            var that = (global::DrumKit.DrumLayout)instance;
            return that.Size;
        }
        private void set_10_DrumLayout_Size(object instance, object Value)
        {
            var that = (global::DrumKit.DrumLayout)instance;
            that.Size = (global::System.Double)Value;
        }
        private object get_11_DrumLayout_X(object instance)
        {
            var that = (global::DrumKit.DrumLayout)instance;
            return that.X;
        }
        private void set_11_DrumLayout_X(object instance, object Value)
        {
            var that = (global::DrumKit.DrumLayout)instance;
            that.X = (global::System.Double)Value;
        }
        private object get_12_DrumLayout_Y(object instance)
        {
            var that = (global::DrumKit.DrumLayout)instance;
            return that.Y;
        }
        private void set_12_DrumLayout_Y(object instance, object Value)
        {
            var that = (global::DrumKit.DrumLayout)instance;
            that.Y = (global::System.Double)Value;
        }
        private object get_13_DrumLayout_ZIndex(object instance)
        {
            var that = (global::DrumKit.DrumLayout)instance;
            return that.ZIndex;
        }
        private void set_13_DrumLayout_ZIndex(object instance, object Value)
        {
            var that = (global::DrumKit.DrumLayout)instance;
            that.ZIndex = (global::System.Int32)Value;
        }
        private object get_14_DrumLayout_Angle(object instance)
        {
            var that = (global::DrumKit.DrumLayout)instance;
            return that.Angle;
        }
        private void set_14_DrumLayout_Angle(object instance, object Value)
        {
            var that = (global::DrumKit.DrumLayout)instance;
            that.Angle = (global::System.Double)Value;
        }
        private object get_15_DrumkitLayout_DrumsList(object instance)
        {
            var that = (global::DrumKit.DrumkitLayout)instance;
            return that.DrumsList;
        }
        private void set_15_DrumkitLayout_DrumsList(object instance, object Value)
        {
            var that = (global::DrumKit.DrumkitLayout)instance;
            that.DrumsList = (global::DrumKit.DrumLayout[])Value;
        }
        private object get_16_Drum_ImageSource(object instance)
        {
            var that = (global::DrumKit.Drum)instance;
            return that.ImageSource;
        }
        private void set_16_Drum_ImageSource(object instance, object Value)
        {
            var that = (global::DrumKit.Drum)instance;
            that.ImageSource = (global::System.String)Value;
        }
        private object get_17_Drum_Id(object instance)
        {
            var that = (global::DrumKit.Drum)instance;
            return that.Id;
        }
        private void set_17_Drum_Id(object instance, object Value)
        {
            var that = (global::DrumKit.Drum)instance;
            that.Id = (global::System.String)Value;
        }
        private object get_18_Drum_Name(object instance)
        {
            var that = (global::DrumKit.Drum)instance;
            return that.Name;
        }
        private void set_18_Drum_Name(object instance, object Value)
        {
            var that = (global::DrumKit.Drum)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_19_Drum_LoadedImageSource(object instance)
        {
            var that = (global::DrumKit.Drum)instance;
            return that.LoadedImageSource;
        }
        private void set_19_Drum_LoadedImageSource(object instance, object Value)
        {
            var that = (global::DrumKit.Drum)instance;
            that.LoadedImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_20_Drum_ImagePressedSource(object instance)
        {
            var that = (global::DrumKit.Drum)instance;
            return that.ImagePressedSource;
        }
        private void set_20_Drum_ImagePressedSource(object instance, object Value)
        {
            var that = (global::DrumKit.Drum)instance;
            that.ImagePressedSource = (global::System.String)Value;
        }
        private object get_21_Drum_LoadedImagePressedSource(object instance)
        {
            var that = (global::DrumKit.Drum)instance;
            return that.LoadedImagePressedSource;
        }
        private void set_21_Drum_LoadedImagePressedSource(object instance, object Value)
        {
            var that = (global::DrumKit.Drum)instance;
            that.LoadedImagePressedSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_22_Drum_Sounds(object instance)
        {
            var that = (global::DrumKit.Drum)instance;
            return that.Sounds;
        }
        private void set_22_Drum_Sounds(object instance, object Value)
        {
            var that = (global::DrumKit.Drum)instance;
            that.Sounds = (global::System.Collections.Generic.List<global::DrumKit.SoundSource>)Value;
        }
        private object get_23_SoundSource_Intensity(object instance)
        {
            var that = (global::DrumKit.SoundSource)instance;
            return that.Intensity;
        }
        private void set_23_SoundSource_Intensity(object instance, object Value)
        {
            var that = (global::DrumKit.SoundSource)instance;
            that.Intensity = (global::System.Int32)Value;
        }
        private object get_24_SoundSource_Source(object instance)
        {
            var that = (global::DrumKit.SoundSource)instance;
            return that.Source;
        }
        private void set_24_SoundSource_Source(object instance, object Value)
        {
            var that = (global::DrumKit.SoundSource)instance;
            that.Source = (global::System.String)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::DrumKit.DrumKit_XamlTypeInfo.XamlMember xamlMember = null;
            global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "DrumKit.DrumPlayUI.Angle":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumPlayUI");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_0_DrumPlayUI_Angle;
                xamlMember.Setter = set_0_DrumPlayUI_Angle;
                break;
            case "DrumKit.DrumPlayUI.DrumID":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumPlayUI");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "DrumID", "String");
                xamlMember.Getter = get_1_DrumPlayUI_DrumID;
                xamlMember.SetIsReadOnly();
                break;
            case "DrumKit.DrumEditUI.Angle":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumEditUI");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_2_DrumEditUI_Angle;
                xamlMember.Setter = set_2_DrumEditUI_Angle;
                break;
            case "DrumKit.DrumEditUI.DrumID":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumEditUI");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "DrumID", "String");
                xamlMember.Getter = get_3_DrumEditUI_DrumID;
                xamlMember.SetIsReadOnly();
                break;
            case "DrumKit.DrumkitLayout.IsDefault":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumkitLayout");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "IsDefault", "Boolean");
                xamlMember.Getter = get_4_DrumkitLayout_IsDefault;
                xamlMember.Setter = set_4_DrumkitLayout_IsDefault;
                break;
            case "DrumKit.DrumkitLayout.Name":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumkitLayout");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_5_DrumkitLayout_Name;
                xamlMember.Setter = set_5_DrumkitLayout_Name;
                break;
            case "DrumKit.DrumkitLayout.TargetViewSerialize":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumkitLayout");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "TargetViewSerialize", "String");
                xamlMember.Getter = get_6_DrumkitLayout_TargetViewSerialize;
                xamlMember.Setter = set_6_DrumkitLayout_TargetViewSerialize;
                break;
            case "DrumKit.DrumkitLayout.TargetView":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumkitLayout");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "TargetView", "DrumKit.DrumkitLayoutTargetView");
                xamlMember.Getter = get_7_DrumkitLayout_TargetView;
                xamlMember.Setter = set_7_DrumkitLayout_TargetView;
                break;
            case "DrumKit.DrumkitLayout.Drums":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumkitLayout");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "Drums", "System.Collections.Generic.Dictionary<String, DrumKit.DrumLayout>");
                xamlMember.Getter = get_8_DrumkitLayout_Drums;
                xamlMember.Setter = set_8_DrumkitLayout_Drums;
                break;
            case "DrumKit.DrumLayout.TargetId":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumLayout");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "TargetId", "String");
                xamlMember.Getter = get_9_DrumLayout_TargetId;
                xamlMember.Setter = set_9_DrumLayout_TargetId;
                break;
            case "DrumKit.DrumLayout.Size":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumLayout");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "Size", "Double");
                xamlMember.Getter = get_10_DrumLayout_Size;
                xamlMember.Setter = set_10_DrumLayout_Size;
                break;
            case "DrumKit.DrumLayout.X":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumLayout");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "X", "Double");
                xamlMember.Getter = get_11_DrumLayout_X;
                xamlMember.Setter = set_11_DrumLayout_X;
                break;
            case "DrumKit.DrumLayout.Y":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumLayout");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "Y", "Double");
                xamlMember.Getter = get_12_DrumLayout_Y;
                xamlMember.Setter = set_12_DrumLayout_Y;
                break;
            case "DrumKit.DrumLayout.ZIndex":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumLayout");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "ZIndex", "Int32");
                xamlMember.Getter = get_13_DrumLayout_ZIndex;
                xamlMember.Setter = set_13_DrumLayout_ZIndex;
                break;
            case "DrumKit.DrumLayout.Angle":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumLayout");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "Angle", "Double");
                xamlMember.Getter = get_14_DrumLayout_Angle;
                xamlMember.Setter = set_14_DrumLayout_Angle;
                break;
            case "DrumKit.DrumkitLayout.DrumsList":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.DrumkitLayout");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "DrumsList", "DrumKit.DrumLayout[]");
                xamlMember.Getter = get_15_DrumkitLayout_DrumsList;
                xamlMember.Setter = set_15_DrumkitLayout_DrumsList;
                break;
            case "DrumKit.Drum.ImageSource":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.Drum");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "ImageSource", "String");
                xamlMember.Getter = get_16_Drum_ImageSource;
                xamlMember.Setter = set_16_Drum_ImageSource;
                break;
            case "DrumKit.Drum.Id":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.Drum");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "Id", "String");
                xamlMember.Getter = get_17_Drum_Id;
                xamlMember.Setter = set_17_Drum_Id;
                break;
            case "DrumKit.Drum.Name":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.Drum");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_18_Drum_Name;
                xamlMember.Setter = set_18_Drum_Name;
                break;
            case "DrumKit.Drum.LoadedImageSource":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.Drum");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "LoadedImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.Getter = get_19_Drum_LoadedImageSource;
                xamlMember.Setter = set_19_Drum_LoadedImageSource;
                break;
            case "DrumKit.Drum.ImagePressedSource":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.Drum");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "ImagePressedSource", "String");
                xamlMember.Getter = get_20_Drum_ImagePressedSource;
                xamlMember.Setter = set_20_Drum_ImagePressedSource;
                break;
            case "DrumKit.Drum.LoadedImagePressedSource":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.Drum");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "LoadedImagePressedSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.Getter = get_21_Drum_LoadedImagePressedSource;
                xamlMember.Setter = set_21_Drum_LoadedImagePressedSource;
                break;
            case "DrumKit.Drum.Sounds":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.Drum");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "Sounds", "System.Collections.Generic.List<DrumKit.SoundSource>");
                xamlMember.Getter = get_22_Drum_Sounds;
                xamlMember.Setter = set_22_Drum_Sounds;
                break;
            case "DrumKit.SoundSource.Intensity":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.SoundSource");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "Intensity", "Int32");
                xamlMember.Getter = get_23_SoundSource_Intensity;
                xamlMember.Setter = set_23_SoundSource_Intensity;
                break;
            case "DrumKit.SoundSource.Source":
                userType = (global::DrumKit.DrumKit_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrumKit.SoundSource");
                xamlMember = new global::DrumKit.DrumKit_XamlTypeInfo.XamlMember(this, "Source", "String");
                xamlMember.Getter = get_24_SoundSource_Source;
                xamlMember.Setter = set_24_SoundSource_Source;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::DrumKit.DrumKit_XamlTypeInfo.XamlSystemBaseType
    {
        global::DrumKit.DrumKit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::DrumKit.DrumKit_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::DrumKit.DrumKit_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::DrumKit.DrumKit_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


